## General

# Prints the definition of the specified alias
alias alias-print='declare -f'


## Kubernetes
alias kube_configs='echo "$(find ~/.kube -type f -regex '"'"'.*\.ya\{0,1\}ml'"'"' | tr '"'"'\n'"'"' ':')$HOME/.kube/config"'
export KUBECONFIG="$(kube_configs)"
alias kubectx='export KUBECONFIG="$(kube_configs)"; command kubectx'

export KUBE_EDITOR="idea --wait"

# Aliases
alias ssh='sshukh'                                                              # Always use sshukh
alias lsl="ls -1lAFhct"                                                         # Prints directory contents human-readable and detailed
alias lsr="ls -1lAFhcrt"                                                        # Prints directory contents recursively human-readable and detailed

function explain(){
  if [[ $# == 0 ]]; then
        cat <<EOH
  Opens http://explainshell.com to explain given command.
  usage: explain <cmd> <args>
  example: explain ps faux
EOH
    return 0
  fi

  local raw=$@
  local cmd=${raw/ /+}
  local url="http://explainshell.com/explain?cmd=$cmd"

  if which xdg-open &> /dev/null; then
    xdg-open $url
  elif which open &> /dev/null; then
    open $url
  else
    echo "xdg-open nor open found. Can not open browser!"
  fi
}


## ANSI

# Prints an ANSI demo screen to check for escape sequence capabilities
alias ansi-test='curl -LfsS https://raw.githubusercontent.com/bkahlert/-/master/ansi-test.ansi'


## Docker

# Prints a ANSI demo screen in a container of the given command in the Docker image.
# Arguments:
#   1 - Docker image
function docker-ansi-test() {
  local -r image=${1?Docker image missing}; shift
  docker run -i --rm --entrypoint sh "$image" -c "printf '%s' '$(curl -LfsS https://raw.githubusercontent.com/bkahlert/-/master/ansi-test.ansi)'"
}

# Starts the given command in the Docker image
# without executing the image's entrypoint.
# Arguments:
#   1 - Docker image
#   2 - commands
#   * - optional arguments
function docker-enter() {
  local -r image=${1?Docker image missing}; shift
  local -r command=${1?command missing}; shift
  docker run --rm --entrypoint "$command" "$image" "$@"
}

# Starts the given command in the Docker image.
# Arguments:
#   1 - Docker image
#   * - optional shell script
#       starts an interactive session if not given
function docker-command() {
  local -r image=${1?Docker image missing}; shift
  if [[ "$#" == "0" ]]; then
    docker run -it --rm "$image"
  else
    docker run --rm "$image" "$@"
  fi
}

# Prints all available shells in the given Docker image.
# Arguments:
#   1 - Docker image
# Output:
#   STDOUT - space separated absolute shell paths
function docker-list-shells() {
  local -r image=${1?Docker image missing}; shift
  docker run --rm --entrypoint cat "$image" /etc/shells | sed -E '/^#/d' | tr '\n' ' '
}

# Starts the preferred shell in the given Docker image.
# Arguments:
#   1 - Docker image
#   * - optional shell script
#       starts an interactive session if not given
# Returns:
#   1 - no preferred shell found
#   * - exit code on `docker run` completion
function docker-shell() {
  local -r image=${1?Docker image missing}; shift
  local -r shells=$(docker-list-shells "$image")
  local -r preferred=('/bin/zsh$' '/zsh$' '/bin/bash$' 'bash$')
  for pref in ${preferred[*]}; do
    for shell in $shells; do
      # echo "$shell =~ $pref"
      if [[ $shell =~ $pref ]]; then
        if [ "$#" -eq 0 ]; then
          docker run -it --rm --entrypoint bash "$image"
          return $?
        else
          docker run --rm --entrypoint bash "$image" -c "$*"
          return $?
        fi
      fi
    done
  done
  return 1
}

# Usage: ubuntu [CMD [ARG...]]
# Runs CMD with optional arguments inside a containerized Ubuntu or
# starts an interactive bash shell if no command was passed.
function ubuntu() {
  if [ "$#" -eq 0 ]; then
    docker run -it --rm ubuntu /bin/bash
  else
    docker run --rm ubuntu bash -c "$*"
  fi
}

# Prints the ID of the most recently created docker container
function docker-latest() {
  docker container ls --format "{{.ID}}" --latest
}

# Usage: ubuntu [CMD [ARG...]]
# Run the specified command in the Docker VM
# If no CMD is provided, defaults to `sh`
function docker-host() {
  if [[ "${#@}" == "0" ]]; then set -- "sh"; fi
  docker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i "${@}"
}

# Prints the log path of the specified container (default: latest container)
function docker-logs() {
  local id="${1:-"$(docker-latest)"}"
  docker inspect -f "{{.LogPath}}" "$id"
}

# Prints the log path of the specified container (default: latest container)
function docker-logs-raw() {
  local -r log="$(docker-host cat "$(docker-logs "${@}")")"
  local -r language="json"
  cat --language "${language}" <(echo "$log")
}



## Kubernetes
alias kc.current-cluster-url="kubectl config view --minify -o jsonpath='{.clusters[].cluster.server}'"
alias kc.current-cluster-hostname="kc.current-cluster-url | awk -F[/:] '{print \$4}'"
#alias microk8s="ssh "$(kc.current-cluster-hostname)" microk8s $*"

# Prints the latest release version of a GitHub project.
# Example: gh-latest bkahlert/kommons
function gh-latest() {
    curl -s https://api.github.com/repos/"${1?Repository missing}"/releases/latest | jq -r .tag_name
}

## macOS aliases
if [[ $OSTYPE == darwin* ]]; then

    function update() {
        brew update
        brew upgrade
        brew upgrade --cask
        brew cleanup
    }

    # Bluetooth restart
    function btrestart() {
      sudo kextunload -b com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport
      sudo kextload -b com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport
    }

    function ql() {
      (( $# > 0 )) && qlmanage -p $* &>/dev/null &
    }

    # Remove .DS_Store files recursively in a directory, default .
    function rmdsstore() {
      find "${@:-.}" -type f -name .DS_Store -delete
    }


    # kill ZScaler (and don't load it at startup; manually start by opening ZScaler app)
    alias start-zscaler="open -a /Applications/ZScaler/ZScaler.app --hide; sudo find /Library/LaunchDaemons -name '*zscaler*' -exec launchctl load {} \;"
    alias kill-zscaler="find /Library/LaunchAgents -name '*zscaler*' -exec launchctl unload {} \;;sudo find /Library/LaunchDaemons -name '*zscaler*' -exec launchctl unload {} \;"

    # open following file extensions with IDEA IntelliJ
    alias -s {kt,bat,txt,.md,.json,.yaml,.yml}=idea

    alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
    alias localip="ipconfig getifaddr en0"
    alias flushdns="dscacheutil -flushcache"
    alias browse="open -a /Applications/Google\ Chrome.app"

    # usage: ec — opens ~/.zshrc with $EDITOR
    # usage: ec name — opens first match of ~/.name* with $EDITOR
    function ec() {
        find -L "$HOME" \
             -type f \
             -name ".${1:-zshrc}*" \
             \( -not -name "*.backup" \) \
             \( -not -name "*.zwc" \) \
             -maxdepth 1 \
             -exec "$EDITOR" {} \;
    }

    # serve . (or public dir if exists) by http
    alias serve="npx http-server -c -p 80"
    alias live="npx live-server --port=80 --no-browser"

    # session record <name>
    # https://github.com/faressoft/terminalizer
    # Usage:
    # 1) record session: `record name`
    # 2) play recorded session: `play name`
    # 3) edit recorded session: `open name.yml`
    # 4) render preview: `preview name`
    # 5) render: `render name`
    alias session="npx terminalizer"
    alias record="[ ! -f \"${HOME}/.hushlogin\" ] && touch \"${HOME}/.hushlogin\"; osascript -e \"tell application \\\"iTerm\\\"\" -e \"set bounds of front window to {300, 30, 1290, 740}\" -e \"end tell\"; npx terminalizer record --skip-sharing"
    alias play="npx terminalizer play"
    alias preview="npx terminalizer render -s 10 -q 30"
    alias render="npx terminalizer render -s 1 -q 30"

    # https://github.com/nvbn/thefuck
    # type fuck to auto-correct failed commands
    eval $(thefuck --alias fuck)

    # type "samples x" instead of "man x" for examples for a command
    alias samples="tldr"
    alias examples="tldr"

    # A cat(1) clone with syntax highlighting and Git integration.
    alias cat="bat --theme=\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo default || echo GitHub)"

    alias ft="grep -rn -H -C 5 --exclude-dir={.git,.svn,CVS} --devices=skip -e"
    killport() {
     local port="$1"
     lsof -P -i:"${port}" | grep -i "listen" | sed -n 2p | awk '{print $2}' | xargs kill -9
    }

    # https://gitlab.dev.codefactory.sh/banking-platform/tooling-api-doc-builder#run-the-generator-locally
    alias dkb-docs=~/Development/DKB/tooling-api-doc-builder/bin/tooling-api-doc-builder-generate-docs-locally

    # generates code for OpenAPI spec $1 (default: first json/yaml/yml file found in specs dir) in generator $2 (default: kotlin)
    openapi() {
     local specFile="${1:-$(find specs -type f \( -iname \*.json -o -iname \*.yaml -o -iname \*.yml \) | head -n 1)}"
     local generator="${2:-kotlin}"
     local outDir="out/${generator}"
     local absOutDir="${PWD}/${outDir}"
     echo "Generating ${generator} code for ${specFile} at ${absOutDir}"
     mkdir -p "${absOutDir}"
     docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli generate \
       -i "/local/${specFile}" \
       -g "${generator}" \
       -o "/local/${outDir}"
    }
    swagger() {
     local specFile="${1:-$(find specs -type f \( -iname \*.json -o -iname \*.yaml -o -iname \*.yml \) | head -n 1)}"
     local lang="${2:-kotlin}"
     local outDir="out/${lang}"
     local absOutDir="${PWD}/${outDir}"
     echo "Generating ${lang} code for ${specFile} at ${absOutDir}"
     mkdir -p "${absOutDir}"
     docker run --rm -v "${PWD}:/local" swaggerapi/swagger-codegen-cli generate \
       -i "/local/${specFile}" \
       -l "${lang}" \
       -o "/local/${outDir}"
    }

    alias fix-spotlight='find . -type d \( -name "node_modules" -o -name ".git" \) -exec touch "{}/.metadata_never_index" \;'
fi
