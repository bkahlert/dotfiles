# shellcheck shell=bash
# bashsupport disable=BP5001

# TODO
#set -x
#[ "${INTELLIJ_ENVIRONMENT_READER-}" ] || source <(curl -LfsS https://git.io/init.rc) || true
#set +x

# Splits the specified variable to an array like it would be the case if a program was called,
# that is, its value is word-split along the whitespaces while *honoring* quotes.
# Arguments:
#   1 - variable name
__split_to_array() {
  # Assigns the arguments array to the variable with the name of the first element.
  program() { local var="$1" && shift && eval "$var"='("${@}")'; }
  if [ -v "$1" ]; then
    eval program "$1" "${(P)1}"
  else
    eval "declare -a -g $1=()"
  fi
  unset program
}

## General

# Prints the definition of the specified alias
alias alias-print='declare -f'

## Git
alias git+x='git update-index --chmod=+x'

# Aliases
alias ssh='sshukh'                                                              # Always use sshukh
alias lsl="ls -1lAFhct"                                                         # Prints directory contents human-readable and detailed
alias lsr="ls -1lAFhcrt"                                                        # Prints directory contents recursively human-readable and detailed

explain(){
  if [[ $# == 0 ]]; then
        cat <<EOH
  Opens http://explainshell.com to explain given command.
  usage: explain <cmd> <args>
  example: explain ps faux
EOH
    return 0
  fi

  local raw=$@
  local cmd=${raw/ /+}
  local url="http://explainshell.com/explain?cmd=$cmd"

  if which xdg-open &> /dev/null; then
    xdg-open $url
  elif which open &> /dev/null; then
    open $url
  else
    echo "xdg-open nor open found. Can not open browser!"
  fi
}

pbcopy-dir() {
  tar -cz "$@" | base64 | pbcopy
}

pbpaste-dir() {
  pbpaste | base64 -d | tar zxvf - 2>/dev/null
}


## ANSI

# Prints an ANSI demo screen to check for escape sequence capabilities
alias ansi-test='curl -LfsS https://raw.githubusercontent.com/bkahlert/-/master/ansi-test.ansi'


## Docker

# Prints a ANSI demo screen in a container of the given command in the Docker image.
# Arguments:
#   1 - Docker image
docker-ansi-test() {
  local -r image=${1?Docker image missing}; shift
  docker run -i --rm --entrypoint sh "$image" -c "printf '%s' '$(curl -LfsS https://raw.githubusercontent.com/bkahlert/-/master/ansi-test.ansi)'"
}

# Prints all running Docker containers and their states
docker-watch() {
  watch -n 2 'docker ps --format "table {{.ID}}\t {{.Image}}\t {{.Status}}"'
}

# Starts the given command in the Docker image
# without executing the image's entrypoint.
# Arguments:
#   1 - Docker image
#   2 - commands
#   * - optional arguments
docker-enter() {
  local -r image=${1?Docker image missing}; shift
  local -r command=${1?command missing}; shift
  docker run --rm --entrypoint "$command" "$image" "$@"
}

# Starts the given command in the Docker image.
# Arguments:
#   1 - Docker image
#   * - optional shell script
#       starts an interactive session if not given
docker-command() {
  local -r image=${1?Docker image missing}; shift
  if [[ "$#" == "0" ]]; then
    docker run -it --rm "$image"
  else
    docker run --rm "$image" "$@"
  fi
}

# Prints all available shells in the given Docker image.
# Arguments:
#   1 - Docker image
# Output:
#   STDOUT - space separated absolute shell paths
docker-list-shells() {
  local -r image=${1?Docker image missing}; shift
  docker run --rm --entrypoint cat "$image" /etc/shells | sed -E '/^#/d' | tr '\n' ' '
}

# Starts the preferred shell in the given Docker image.
# Arguments:
#   1 - Docker image
#   * - optional shell script
#       starts an interactive session if not given
# Returns:
#   1 - no preferred shell found
#   * - exit code on `docker run` completion
docker-shell() {
  local -r image=${1?Docker image missing}; shift
  local -r shells=$(docker-list-shells "$image")
  local -r preferred=('/bin/zsh$' '/zsh$' '/bin/bash$' 'bash$')
  for pref in ${preferred[*]}; do
    for shell in $shells; do
      # echo "$shell =~ $pref"
      if [[ $shell =~ $pref ]]; then
        if [ "$#" -eq 0 ]; then
          docker run -it --rm --entrypoint bash "$image"
          return $?
        else
          docker run --rm --entrypoint bash "$image" -c "$*"
          return $?
        fi
      fi
    done
  done
  return 1
}

# Usage: alpine [CMD [ARG...]]
# Runs CMD with optional arguments inside a containerized Ubuntu or
# starts an interactive bash shell if no command was passed.
alpine() {
  __split_to_array DOCKER_ARGS
  local -a cmd=(docker run "${DOCKER_ARGS[@]}" --rm -e LANG=C.UTF-8 -e TERM="$TERM")
  if [ "$#" -eq 0 ]; then
    "${cmd[@]}" -it docker:20.10.10-alpine3.14 /bin/sh
  else
    "${cmd[@]}" docker:20.10.10-alpine3.14 sh -c "$*"
  fi
}

# Same as `alpine` with with current working directory mapped to container.
alpine-here() {
  DOCKER_ARGS="-v '$PWD:$PWD' -w '$PWD'" alpine "$@"
}

# Usage: ubuntu [CMD [ARG...]]
# Runs CMD with optional arguments inside a containerized Ubuntu or
# starts an interactive bash shell if no command was passed.
ubuntu() {
  __split_to_array DOCKER_ARGS
  local -a cmd=(docker run "${DOCKER_ARGS[@]}" --rm -e LANG=C.UTF-8 -e TERM="$TERM")
  if [ "$#" -eq 0 ]; then
    "${cmd[@]}" -it ubuntu /bin/bash
  else
    "${cmd[@]}" ubuntu bash -c "$*"
  fi
}

# Same as `ubuntu` with with current working directory mapped to container.
ubuntu-here() {
  DOCKER_ARGS="-v '$PWD:$PWD' -w '$PWD'" ubuntu "$@"
}

# Usage: busybox [CMD [ARG...]]
# Runs CMD with optional arguments inside a containerized Ubuntu or
# starts an interactive bash shell if no command was passed.
busybox() {
  __split_to_array DOCKER_ARGS
  local -a cmd=(docker run "${DOCKER_ARGS[@]}" --rm -e LANG=C.UTF-8 -e TERM="$TERM")
  if [ "$#" -eq 0 ]; then
    "${cmd[@]}" -it busybox /bin/sh
  else
    "${cmd[@]}" busybox bash -c "$*"
  fi
}

# Same as `busybox` with with current working directory mapped to container.
busybox-here() {
  DOCKER_ARGS="-v '$PWD:$PWD' -w '$PWD'" busybox "$@"
}

# Prints the ID of the most recently created docker container
docker-latest() {
  docker container ls --format "{{.ID}}" --latest
}

# Returns the IP address of the specified container.
docker-ip() {
  local id=${1-}
  [ "$id" ] || id=$(docker-latest)
  docker inspect "$id" >inspect.json | jq --raw-output --join-output '.[].NetworkSettings.Networks.bridge.IPAddress'
}

# Usage: ubuntu [CMD [ARG...]]
# Run the specified command in the Docker VM
# If no CMD is provided, defaults to `sh`
docker-host() {
  if [[ "${#@}" == "0" ]]; then set -- "sh"; fi
  docker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i "${@}"
}

# Prints the log path of the specified container (default: latest container)
docker-logs() {
  local id="${1:-"$(docker-latest)"}"
  docker inspect -f "{{.LogPath}}" "$id"
}

# Prints the log path of the specified container (default: latest container)
docker-logs-raw() {
  local -r log="$(docker-host cat "$(docker-logs "${@}")")"
  local -r language="json"
  cat --language "${language}" <(echo "$log")
}


# Prints the latest release version of a GitHub project.
# Example: gh-latest bkahlert/kommons
gh-latest() {
    curl -LfsS https://api.github.com/repos/"${1?Repository missing}"/releases/latest | jq -r .tag_name
}

## macOS aliases
if [[ $OSTYPE == darwin* ]]; then

    update() {
        brew update
        brew upgrade
        brew upgrade --cask
        brew cleanup
    }

    ql() {
      (( $# > 0 )) && qlmanage -p $* &>/dev/null &
    }

    # Remove .DS_Store files recursively in a directory, default .
    rmdsstore() {
      find "${@:-.}" -type f -name .DS_Store -delete
    }


    # kill ZScaler (and don't load it at startup; manually start by opening ZScaler app)
    alias start-zscaler="open -a /Applications/ZScaler/ZScaler.app --hide; sudo find /Library/LaunchDaemons -name '*zscaler*' -exec launchctl load {} \;"
    alias kill-zscaler="find /Library/LaunchAgents -name '*zscaler*' -exec launchctl unload {} \;;sudo find /Library/LaunchDaemons -name '*zscaler*' -exec launchctl unload {} \;"

    # open following file extensions with IDEA IntelliJ
    alias -s {kt,bat,txt,.md,.json,.yaml,.yml}=idea

    alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
    alias localip="ipconfig getifaddr en0"
    alias flushdns="dscacheutil -flushcache"
    alias browse="open -a /Applications/Google\ Chrome.app"

    # usage: ec — opens ~/.zshrc with $EDITOR
    # usage: ec name — opens first match of ~/.name* with $EDITOR
    ec() {
        find -L "$HOME" \
             -type f \
             -name ".${1:-zshrc}*" \
             \( -not -name "*.backup" \) \
             \( -not -name "*.zwc" \) \
             -maxdepth 1 \
             -exec "$EDITOR" {} \;
    }

    # serve . (or public dir if exists) by http
    alias serve="npx http-server -c-1 -p 80"
    alias live="npx live-server --port=80 --no-browser"

    # type "samples x" instead of "man x" for examples for a command
    alias samples="tldr"
    alias examples="tldr"

    # A cat(1) clone with syntax highlighting and Git integration.
    alias cat="bat --theme=\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo default || echo GitHub)"

    alias ft="grep -rn -H -C 5 --exclude-dir={.git,.svn,CVS} --devices=skip -e"

    # Kills the process listening on the specified port.
    kill_listening_process() {
      local port=${1?port missing} pid
      pid=$(lsof -i ":$port" -P -n | tail -n 1 | awk '{print $2}')
      [ ! "${pid}" ] || kill "$pid" || kill "$pid" -9 || die "failed to kill process $pid"
    }

    # https://gitlab.dev.codefactory.sh/banking-platform/tooling-api-doc-builder#run-the-generator-locally
    alias dkb-docs=~/Development/DKB/tooling-api-doc-builder/bin/tooling-api-doc-builder-generate-docs-locally

    # generates code for OpenAPI spec $1 (default: first json/yaml/yml file found in specs dir) in generator $2 (default: kotlin)
    openapi() {
     local specFile="${1:-$(find specs -type f \( -iname \*.json -o -iname \*.yaml -o -iname \*.yml \) | head -n 1)}"
     local generator="${2:-kotlin}"
     local outDir="out/${generator}"
     local absOutDir="$PWD/${outDir}"
     echo "Generating ${generator} code for ${specFile} at ${absOutDir}"
     mkdir -p "${absOutDir}"
     docker run --rm -v "$PWD:/local" openapitools/openapi-generator-cli generate \
       -i "/local/${specFile}" \
       -g "${generator}" \
       -o "/local/${outDir}"
    }
    swagger() {
     local specFile="${1:-$(find specs -type f \( -iname \*.json -o -iname \*.yaml -o -iname \*.yml \) | head -n 1)}"
     local lang="${2:-kotlin}"
     local outDir="out/${lang}"
     local absOutDir="$PWD/${outDir}"
     echo "Generating ${lang} code for ${specFile} at ${absOutDir}"
     mkdir -p "${absOutDir}"
     docker run --rm -v "$PWD:/local" swaggerapi/swagger-codegen-cli generate \
       -i "/local/${specFile}" \
       -l "${lang}" \
       -o "/local/${outDir}"
    }

    alias fix-spotlight='find . -type d \( -name "node_modules" -o -name ".git" \) -exec touch "{}/.metadata_never_index" \;'
fi

kill-port() {
    local port=${1?missing port} pid
    while nc -z localhost "$port" &>/dev/null; do
        1>&2 printf "stopping ... "
        pid=$(lsof -Fp -Pi ":$port" -sTCP:LISTEN | grep --extended-regexp 'p\d+' | cut -c2-)
        kill "$pid" || exit
        sleep 1
    done
    1>&2 printf "✔\n"
}
